#!/bin/bash

build_livraria_image() {
    
    ################################################
    # Gerando a imagem docker do LivrariaMVC
    ################################################
    
    cd LivrariaMVC
    
    mvn package clean
    
    # minikube image load apenas funciona no docker 24
    
    minikube image load livraria/livraria-mvc
    
    cd ..
}

build_transacao_image() {
    
    ################################################
    # Gerando a imagem docker do TransacaoAPI
    ################################################
    
    cd TransacaoAPI
    
    mvn package clean
    
    minikube image load livraria/transacao-api

    cd ..
}

load_mysql_image() {
    minikube image load mysql:5.7
}

################################################
# Inicializando o Minikube
################################################

minikube start

################################################
# Habilitando o Ingress
################################################

minikube image load k8s.gcr.io/ingress-nginx/controller:v1.9.4

minikube addons enable ingress

################################################
# Inicializando o DashBoard
################################################

minikube addons enable dashboard

minikube addons enable metrics-server

minikube dashboard &

################################################
# Verificando flag -b
################################################

while getopts ":b" option; do
   case $option in
      b) # build images
         build_livraria_image
         build_transacao_image
         load_mysql_image
   esac
done

################################################
# Configurando o K8s (DB)
################################################

cd K8s/db

kubectl apply -f secret.yaml; kubectl create -f pv.yaml; kubectl create -f pvc.yaml;

kubectl apply -f deployment.yaml; kubectl apply -f service.yaml; kubectl apply -f configmap.yaml; 

cd ../..

################################################
# Configurando o Livraria-MVC
################################################

cd K8s/livraria

kubectl wait --for=jsonpath='{.status.phase}'=Running $(kubectl get pods -o=name)

kubectl create -f deployment.yaml; kubectl create -f service.yaml; kubectl create -f configmap.yaml; 

cd ../..

################################################
# Configurando o TransacaoAPI
################################################

cd K8s/transacao-api

kubectl create -f deployment.yaml; kubectl create -f service.yaml;  

cd ../..

################################################
# Configurando o Ingress
################################################

cd K8s

kubectl apply -f ingress.yaml